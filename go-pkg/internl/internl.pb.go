// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: internl.proto

package internl

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	github_com_gogo_protobuf_sortkeys "github.com/gogo/protobuf/sortkeys"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strconv "strconv"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Languages int32

const (
	EN Languages = 0
	FR Languages = 1
)

var Languages_name = map[int32]string{
	0: "EN",
	1: "FR",
}

var Languages_value = map[string]int32{
	"EN": 0,
	"FR": 1,
}

func (Languages) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_bfe439df8e494cc1, []int{0}
}

type MessageRequest struct {
	ServiceRequester string    `protobuf:"bytes,1,opt,name=ServiceRequester,proto3" json:"ServiceRequester,omitempty"`
	Lang             Languages `protobuf:"varint,2,opt,name=Lang,proto3,enum=internl.Languages" json:"Lang,omitempty"`
	Code             uint32    `protobuf:"varint,3,opt,name=Code,proto3" json:"Code,omitempty"`
}

func (m *MessageRequest) Reset()      { *m = MessageRequest{} }
func (*MessageRequest) ProtoMessage() {}
func (*MessageRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_bfe439df8e494cc1, []int{0}
}
func (m *MessageRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MessageRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MessageRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MessageRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MessageRequest.Merge(m, src)
}
func (m *MessageRequest) XXX_Size() int {
	return m.Size()
}
func (m *MessageRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_MessageRequest.DiscardUnknown(m)
}

var xxx_messageInfo_MessageRequest proto.InternalMessageInfo

func (m *MessageRequest) GetServiceRequester() string {
	if m != nil {
		return m.ServiceRequester
	}
	return ""
}

func (m *MessageRequest) GetLang() Languages {
	if m != nil {
		return m.Lang
	}
	return EN
}

func (m *MessageRequest) GetCode() uint32 {
	if m != nil {
		return m.Code
	}
	return 0
}

type MessageResponse struct {
	Value string `protobuf:"bytes,1,opt,name=Value,proto3" json:"Value,omitempty"`
}

func (m *MessageResponse) Reset()      { *m = MessageResponse{} }
func (*MessageResponse) ProtoMessage() {}
func (*MessageResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_bfe439df8e494cc1, []int{1}
}
func (m *MessageResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MessageResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MessageResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MessageResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MessageResponse.Merge(m, src)
}
func (m *MessageResponse) XXX_Size() int {
	return m.Size()
}
func (m *MessageResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MessageResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MessageResponse proto.InternalMessageInfo

func (m *MessageResponse) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

type PushMessage struct {
	Value string    `protobuf:"bytes,1,opt,name=Value,proto3" json:"Value,omitempty"`
	Lang  Languages `protobuf:"varint,2,opt,name=Lang,proto3,enum=internl.Languages" json:"Lang,omitempty"`
	Code  uint32    `protobuf:"varint,3,opt,name=Code,proto3" json:"Code,omitempty"`
}

func (m *PushMessage) Reset()      { *m = PushMessage{} }
func (*PushMessage) ProtoMessage() {}
func (*PushMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_bfe439df8e494cc1, []int{2}
}
func (m *PushMessage) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PushMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PushMessage.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PushMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PushMessage.Merge(m, src)
}
func (m *PushMessage) XXX_Size() int {
	return m.Size()
}
func (m *PushMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_PushMessage.DiscardUnknown(m)
}

var xxx_messageInfo_PushMessage proto.InternalMessageInfo

func (m *PushMessage) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

func (m *PushMessage) GetLang() Languages {
	if m != nil {
		return m.Lang
	}
	return EN
}

func (m *PushMessage) GetCode() uint32 {
	if m != nil {
		return m.Code
	}
	return 0
}

type PushMessageRes struct {
}

func (m *PushMessageRes) Reset()      { *m = PushMessageRes{} }
func (*PushMessageRes) ProtoMessage() {}
func (*PushMessageRes) Descriptor() ([]byte, []int) {
	return fileDescriptor_bfe439df8e494cc1, []int{3}
}
func (m *PushMessageRes) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PushMessageRes) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PushMessageRes.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PushMessageRes) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PushMessageRes.Merge(m, src)
}
func (m *PushMessageRes) XXX_Size() int {
	return m.Size()
}
func (m *PushMessageRes) XXX_DiscardUnknown() {
	xxx_messageInfo_PushMessageRes.DiscardUnknown(m)
}

var xxx_messageInfo_PushMessageRes proto.InternalMessageInfo

type NewCode struct {
	Title string `protobuf:"bytes,1,opt,name=Title,proto3" json:"Title,omitempty"`
	Code  uint32 `protobuf:"varint,2,opt,name=Code,proto3" json:"Code,omitempty"`
}

func (m *NewCode) Reset()      { *m = NewCode{} }
func (*NewCode) ProtoMessage() {}
func (*NewCode) Descriptor() ([]byte, []int) {
	return fileDescriptor_bfe439df8e494cc1, []int{4}
}
func (m *NewCode) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NewCode) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NewCode.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NewCode) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NewCode.Merge(m, src)
}
func (m *NewCode) XXX_Size() int {
	return m.Size()
}
func (m *NewCode) XXX_DiscardUnknown() {
	xxx_messageInfo_NewCode.DiscardUnknown(m)
}

var xxx_messageInfo_NewCode proto.InternalMessageInfo

func (m *NewCode) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *NewCode) GetCode() uint32 {
	if m != nil {
		return m.Code
	}
	return 0
}

type NewCodeRes struct {
}

func (m *NewCodeRes) Reset()      { *m = NewCodeRes{} }
func (*NewCodeRes) ProtoMessage() {}
func (*NewCodeRes) Descriptor() ([]byte, []int) {
	return fileDescriptor_bfe439df8e494cc1, []int{5}
}
func (m *NewCodeRes) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NewCodeRes) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NewCodeRes.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NewCodeRes) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NewCodeRes.Merge(m, src)
}
func (m *NewCodeRes) XXX_Size() int {
	return m.Size()
}
func (m *NewCodeRes) XXX_DiscardUnknown() {
	xxx_messageInfo_NewCodeRes.DiscardUnknown(m)
}

var xxx_messageInfo_NewCodeRes proto.InternalMessageInfo

type SetTitleCode struct {
	Title string `protobuf:"bytes,1,opt,name=Title,proto3" json:"Title,omitempty"`
	Code  uint32 `protobuf:"varint,2,opt,name=Code,proto3" json:"Code,omitempty"`
}

func (m *SetTitleCode) Reset()      { *m = SetTitleCode{} }
func (*SetTitleCode) ProtoMessage() {}
func (*SetTitleCode) Descriptor() ([]byte, []int) {
	return fileDescriptor_bfe439df8e494cc1, []int{6}
}
func (m *SetTitleCode) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SetTitleCode) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SetTitleCode.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SetTitleCode) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SetTitleCode.Merge(m, src)
}
func (m *SetTitleCode) XXX_Size() int {
	return m.Size()
}
func (m *SetTitleCode) XXX_DiscardUnknown() {
	xxx_messageInfo_SetTitleCode.DiscardUnknown(m)
}

var xxx_messageInfo_SetTitleCode proto.InternalMessageInfo

func (m *SetTitleCode) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *SetTitleCode) GetCode() uint32 {
	if m != nil {
		return m.Code
	}
	return 0
}

type SetTitleCodeRes struct {
}

func (m *SetTitleCodeRes) Reset()      { *m = SetTitleCodeRes{} }
func (*SetTitleCodeRes) ProtoMessage() {}
func (*SetTitleCodeRes) Descriptor() ([]byte, []int) {
	return fileDescriptor_bfe439df8e494cc1, []int{7}
}
func (m *SetTitleCodeRes) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SetTitleCodeRes) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SetTitleCodeRes.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SetTitleCodeRes) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SetTitleCodeRes.Merge(m, src)
}
func (m *SetTitleCodeRes) XXX_Size() int {
	return m.Size()
}
func (m *SetTitleCodeRes) XXX_DiscardUnknown() {
	xxx_messageInfo_SetTitleCodeRes.DiscardUnknown(m)
}

var xxx_messageInfo_SetTitleCodeRes proto.InternalMessageInfo

type CodeReq struct {
	Code uint32 `protobuf:"varint,1,opt,name=Code,proto3" json:"Code,omitempty"`
}

func (m *CodeReq) Reset()      { *m = CodeReq{} }
func (*CodeReq) ProtoMessage() {}
func (*CodeReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_bfe439df8e494cc1, []int{8}
}
func (m *CodeReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CodeReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CodeReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CodeReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CodeReq.Merge(m, src)
}
func (m *CodeReq) XXX_Size() int {
	return m.Size()
}
func (m *CodeReq) XXX_DiscardUnknown() {
	xxx_messageInfo_CodeReq.DiscardUnknown(m)
}

var xxx_messageInfo_CodeReq proto.InternalMessageInfo

func (m *CodeReq) GetCode() uint32 {
	if m != nil {
		return m.Code
	}
	return 0
}

type Code struct {
	Code   uint32            `protobuf:"varint,1,opt,name=Code,proto3" json:"Code,omitempty"`
	Title  string            `protobuf:"bytes,2,opt,name=Title,proto3" json:"Title,omitempty"`
	Values map[uint32]string `protobuf:"bytes,3,rep,name=Values,proto3" json:"Values,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (m *Code) Reset()      { *m = Code{} }
func (*Code) ProtoMessage() {}
func (*Code) Descriptor() ([]byte, []int) {
	return fileDescriptor_bfe439df8e494cc1, []int{9}
}
func (m *Code) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Code) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Code.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Code) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Code.Merge(m, src)
}
func (m *Code) XXX_Size() int {
	return m.Size()
}
func (m *Code) XXX_DiscardUnknown() {
	xxx_messageInfo_Code.DiscardUnknown(m)
}

var xxx_messageInfo_Code proto.InternalMessageInfo

func (m *Code) GetCode() uint32 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *Code) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *Code) GetValues() map[uint32]string {
	if m != nil {
		return m.Values
	}
	return nil
}

type AllReq struct {
}

func (m *AllReq) Reset()      { *m = AllReq{} }
func (*AllReq) ProtoMessage() {}
func (*AllReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_bfe439df8e494cc1, []int{10}
}
func (m *AllReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AllReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AllReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AllReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AllReq.Merge(m, src)
}
func (m *AllReq) XXX_Size() int {
	return m.Size()
}
func (m *AllReq) XXX_DiscardUnknown() {
	xxx_messageInfo_AllReq.DiscardUnknown(m)
}

var xxx_messageInfo_AllReq proto.InternalMessageInfo

type All struct {
	Codes map[uint32]*Code `protobuf:"bytes,3,rep,name=Codes,proto3" json:"Codes,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (m *All) Reset()      { *m = All{} }
func (*All) ProtoMessage() {}
func (*All) Descriptor() ([]byte, []int) {
	return fileDescriptor_bfe439df8e494cc1, []int{11}
}
func (m *All) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *All) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_All.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *All) XXX_Merge(src proto.Message) {
	xxx_messageInfo_All.Merge(m, src)
}
func (m *All) XXX_Size() int {
	return m.Size()
}
func (m *All) XXX_DiscardUnknown() {
	xxx_messageInfo_All.DiscardUnknown(m)
}

var xxx_messageInfo_All proto.InternalMessageInfo

func (m *All) GetCodes() map[uint32]*Code {
	if m != nil {
		return m.Codes
	}
	return nil
}

func init() {
	proto.RegisterEnum("internl.Languages", Languages_name, Languages_value)
	proto.RegisterType((*MessageRequest)(nil), "internl.MessageRequest")
	proto.RegisterType((*MessageResponse)(nil), "internl.MessageResponse")
	proto.RegisterType((*PushMessage)(nil), "internl.PushMessage")
	proto.RegisterType((*PushMessageRes)(nil), "internl.PushMessageRes")
	proto.RegisterType((*NewCode)(nil), "internl.NewCode")
	proto.RegisterType((*NewCodeRes)(nil), "internl.NewCodeRes")
	proto.RegisterType((*SetTitleCode)(nil), "internl.SetTitleCode")
	proto.RegisterType((*SetTitleCodeRes)(nil), "internl.SetTitleCodeRes")
	proto.RegisterType((*CodeReq)(nil), "internl.CodeReq")
	proto.RegisterType((*Code)(nil), "internl.Code")
	proto.RegisterMapType((map[uint32]string)(nil), "internl.Code.ValuesEntry")
	proto.RegisterType((*AllReq)(nil), "internl.AllReq")
	proto.RegisterType((*All)(nil), "internl.All")
	proto.RegisterMapType((map[uint32]*Code)(nil), "internl.All.CodesEntry")
}

func init() { proto.RegisterFile("internl.proto", fileDescriptor_bfe439df8e494cc1) }

var fileDescriptor_bfe439df8e494cc1 = []byte{
	// 478 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x93, 0xc1, 0x6e, 0xd3, 0x40,
	0x10, 0x86, 0xbd, 0x76, 0x9b, 0xd0, 0x49, 0x93, 0x9a, 0x15, 0x12, 0xa1, 0x88, 0x55, 0x64, 0x24,
	0x88, 0x2a, 0xc5, 0x11, 0xe9, 0x81, 0xc2, 0x2d, 0xa0, 0xc2, 0x05, 0x2a, 0xe4, 0x22, 0x0e, 0x5c,
	0x90, 0x53, 0x46, 0xae, 0x95, 0x8d, 0x9d, 0x78, 0xed, 0x42, 0x0f, 0x48, 0x3c, 0x02, 0x4f, 0xc0,
	0x99, 0x47, 0xe1, 0x98, 0x63, 0x8f, 0xc4, 0xb9, 0x70, 0xec, 0x23, 0xa0, 0x5d, 0x6f, 0x5c, 0x23,
	0x72, 0x41, 0x3d, 0x79, 0xe6, 0x9f, 0x99, 0xff, 0x1b, 0xaf, 0xbd, 0xd0, 0x0c, 0xa3, 0x14, 0x93,
	0x88, 0xbb, 0xd3, 0x24, 0x4e, 0x63, 0x5a, 0xd7, 0xa9, 0xf3, 0x19, 0x5a, 0xaf, 0x51, 0x08, 0x3f,
	0x40, 0x0f, 0x67, 0x19, 0x8a, 0x94, 0xee, 0x81, 0x7d, 0x8c, 0xc9, 0x59, 0x78, 0xb2, 0x52, 0x30,
	0x69, 0x93, 0x0e, 0xe9, 0x6e, 0x79, 0xff, 0xe8, 0xf4, 0x01, 0x6c, 0xbc, 0xf2, 0xa3, 0xa0, 0x6d,
	0x76, 0x48, 0xb7, 0x35, 0xa0, 0xee, 0x0a, 0x22, 0xc5, 0xcc, 0x0f, 0x50, 0x78, 0xaa, 0x4e, 0x29,
	0x6c, 0x3c, 0x8f, 0x3f, 0x62, 0xdb, 0xea, 0x90, 0x6e, 0xd3, 0x53, 0xb1, 0xf3, 0x10, 0x76, 0x4a,
	0xb2, 0x98, 0xc6, 0x91, 0x40, 0x7a, 0x0b, 0x36, 0xdf, 0xf9, 0x3c, 0x43, 0xcd, 0x2b, 0x12, 0xe7,
	0x03, 0x34, 0xde, 0x64, 0xe2, 0x54, 0x37, 0xaf, 0x6f, 0xba, 0xd6, 0x26, 0x36, 0xb4, 0x2a, 0x00,
	0x0f, 0x85, 0xb3, 0x0f, 0xf5, 0x23, 0xfc, 0x24, 0x8b, 0x12, 0xf7, 0x36, 0x4c, 0x79, 0x89, 0x53,
	0x49, 0x69, 0x63, 0x56, 0x6c, 0xb6, 0x01, 0xf4, 0x90, 0xb4, 0x38, 0x80, 0xed, 0x63, 0x4c, 0x55,
	0xf7, 0x7f, 0xfa, 0xdc, 0x84, 0x9d, 0xea, 0xa4, 0x34, 0xbb, 0x07, 0xf5, 0x22, 0x9c, 0x95, 0x13,
	0xa4, 0x32, 0xf1, 0x9d, 0x14, 0xe2, 0xba, 0xe2, 0x15, 0xd8, 0xac, 0x82, 0x1f, 0x41, 0x4d, 0x1d,
	0x9c, 0x68, 0x5b, 0x1d, 0xab, 0xdb, 0x18, 0xdc, 0x29, 0x4f, 0x4c, 0x0e, 0xb9, 0x45, 0xed, 0x30,
	0x4a, 0x93, 0x73, 0x4f, 0x37, 0xee, 0x3e, 0x81, 0x46, 0x45, 0xa6, 0x36, 0x58, 0x63, 0x3c, 0xd7,
	0x28, 0x19, 0x4a, 0xd2, 0x99, 0xfa, 0x32, 0x9a, 0xa4, 0x92, 0xa7, 0xe6, 0x01, 0x71, 0x6e, 0x40,
	0x6d, 0xc8, 0xb9, 0x87, 0x33, 0xe7, 0x0b, 0x58, 0x43, 0xce, 0x69, 0x0f, 0x36, 0x25, 0x67, 0x45,
	0xbf, 0x5d, 0xd2, 0x87, 0xbc, 0xd8, 0x40, 0xb3, 0x8b, 0xae, 0xdd, 0x97, 0x00, 0x57, 0xe2, 0x1a,
	0xf2, 0xfd, 0x2a, 0xb9, 0x31, 0x68, 0xfe, 0xf5, 0x32, 0x95, 0x45, 0xf6, 0xee, 0xc2, 0x56, 0xf9,
	0x47, 0xd0, 0x1a, 0x98, 0x87, 0x47, 0xb6, 0x21, 0x9f, 0x2f, 0x3c, 0x9b, 0x3c, 0x9b, 0xcc, 0x17,
	0xcc, 0xb8, 0x58, 0x30, 0xe3, 0x72, 0xc1, 0xc8, 0xd7, 0x9c, 0x91, 0x1f, 0x39, 0x23, 0x3f, 0x73,
	0x46, 0xe6, 0x39, 0x23, 0xbf, 0x72, 0x46, 0x7e, 0xe7, 0xcc, 0xb8, 0xcc, 0x19, 0xf9, 0xb6, 0x64,
	0xc6, 0x7c, 0xc9, 0x8c, 0x8b, 0x25, 0x33, 0xde, 0x3f, 0x0e, 0xc2, 0xf4, 0x34, 0x1b, 0xb9, 0x27,
	0xf1, 0xa4, 0x3f, 0xc2, 0x68, 0xec, 0xf7, 0x26, 0xd8, 0x2f, 0xf8, 0x7e, 0x1a, 0xc6, 0x91, 0xcf,
	0x43, 0xa1, 0x82, 0x7e, 0x10, 0xf7, 0xa6, 0xe3, 0x40, 0xd7, 0xf8, 0xa8, 0xa6, 0xae, 0xe2, 0xfe,
	0x9f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x98, 0x93, 0xa8, 0x6f, 0x9b, 0x03, 0x00, 0x00,
}

func (x Languages) String() string {
	s, ok := Languages_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (this *MessageRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*MessageRequest)
	if !ok {
		that2, ok := that.(MessageRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ServiceRequester != that1.ServiceRequester {
		return false
	}
	if this.Lang != that1.Lang {
		return false
	}
	if this.Code != that1.Code {
		return false
	}
	return true
}
func (this *MessageResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*MessageResponse)
	if !ok {
		that2, ok := that.(MessageResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Value != that1.Value {
		return false
	}
	return true
}
func (this *PushMessage) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*PushMessage)
	if !ok {
		that2, ok := that.(PushMessage)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Value != that1.Value {
		return false
	}
	if this.Lang != that1.Lang {
		return false
	}
	if this.Code != that1.Code {
		return false
	}
	return true
}
func (this *PushMessageRes) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*PushMessageRes)
	if !ok {
		that2, ok := that.(PushMessageRes)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *NewCode) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*NewCode)
	if !ok {
		that2, ok := that.(NewCode)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Title != that1.Title {
		return false
	}
	if this.Code != that1.Code {
		return false
	}
	return true
}
func (this *NewCodeRes) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*NewCodeRes)
	if !ok {
		that2, ok := that.(NewCodeRes)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *SetTitleCode) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SetTitleCode)
	if !ok {
		that2, ok := that.(SetTitleCode)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Title != that1.Title {
		return false
	}
	if this.Code != that1.Code {
		return false
	}
	return true
}
func (this *SetTitleCodeRes) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SetTitleCodeRes)
	if !ok {
		that2, ok := that.(SetTitleCodeRes)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *CodeReq) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CodeReq)
	if !ok {
		that2, ok := that.(CodeReq)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Code != that1.Code {
		return false
	}
	return true
}
func (this *Code) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Code)
	if !ok {
		that2, ok := that.(Code)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Code != that1.Code {
		return false
	}
	if this.Title != that1.Title {
		return false
	}
	if len(this.Values) != len(that1.Values) {
		return false
	}
	for i := range this.Values {
		if this.Values[i] != that1.Values[i] {
			return false
		}
	}
	return true
}
func (this *AllReq) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AllReq)
	if !ok {
		that2, ok := that.(AllReq)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *All) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*All)
	if !ok {
		that2, ok := that.(All)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Codes) != len(that1.Codes) {
		return false
	}
	for i := range this.Codes {
		if !this.Codes[i].Equal(that1.Codes[i]) {
			return false
		}
	}
	return true
}
func (this *MessageRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&internl.MessageRequest{")
	s = append(s, "ServiceRequester: "+fmt.Sprintf("%#v", this.ServiceRequester)+",\n")
	s = append(s, "Lang: "+fmt.Sprintf("%#v", this.Lang)+",\n")
	s = append(s, "Code: "+fmt.Sprintf("%#v", this.Code)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *MessageResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&internl.MessageResponse{")
	s = append(s, "Value: "+fmt.Sprintf("%#v", this.Value)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *PushMessage) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&internl.PushMessage{")
	s = append(s, "Value: "+fmt.Sprintf("%#v", this.Value)+",\n")
	s = append(s, "Lang: "+fmt.Sprintf("%#v", this.Lang)+",\n")
	s = append(s, "Code: "+fmt.Sprintf("%#v", this.Code)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *PushMessageRes) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&internl.PushMessageRes{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *NewCode) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&internl.NewCode{")
	s = append(s, "Title: "+fmt.Sprintf("%#v", this.Title)+",\n")
	s = append(s, "Code: "+fmt.Sprintf("%#v", this.Code)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *NewCodeRes) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&internl.NewCodeRes{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SetTitleCode) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&internl.SetTitleCode{")
	s = append(s, "Title: "+fmt.Sprintf("%#v", this.Title)+",\n")
	s = append(s, "Code: "+fmt.Sprintf("%#v", this.Code)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SetTitleCodeRes) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&internl.SetTitleCodeRes{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CodeReq) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&internl.CodeReq{")
	s = append(s, "Code: "+fmt.Sprintf("%#v", this.Code)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Code) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&internl.Code{")
	s = append(s, "Code: "+fmt.Sprintf("%#v", this.Code)+",\n")
	s = append(s, "Title: "+fmt.Sprintf("%#v", this.Title)+",\n")
	keysForValues := make([]uint32, 0, len(this.Values))
	for k, _ := range this.Values {
		keysForValues = append(keysForValues, k)
	}
	github_com_gogo_protobuf_sortkeys.Uint32s(keysForValues)
	mapStringForValues := "map[uint32]string{"
	for _, k := range keysForValues {
		mapStringForValues += fmt.Sprintf("%#v: %#v,", k, this.Values[k])
	}
	mapStringForValues += "}"
	if this.Values != nil {
		s = append(s, "Values: "+mapStringForValues+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *AllReq) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&internl.AllReq{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *All) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&internl.All{")
	keysForCodes := make([]uint32, 0, len(this.Codes))
	for k, _ := range this.Codes {
		keysForCodes = append(keysForCodes, k)
	}
	github_com_gogo_protobuf_sortkeys.Uint32s(keysForCodes)
	mapStringForCodes := "map[uint32]*Code{"
	for _, k := range keysForCodes {
		mapStringForCodes += fmt.Sprintf("%#v: %#v,", k, this.Codes[k])
	}
	mapStringForCodes += "}"
	if this.Codes != nil {
		s = append(s, "Codes: "+mapStringForCodes+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringInternl(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *MessageRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MessageRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MessageRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Code != 0 {
		i = encodeVarintInternl(dAtA, i, uint64(m.Code))
		i--
		dAtA[i] = 0x18
	}
	if m.Lang != 0 {
		i = encodeVarintInternl(dAtA, i, uint64(m.Lang))
		i--
		dAtA[i] = 0x10
	}
	if len(m.ServiceRequester) > 0 {
		i -= len(m.ServiceRequester)
		copy(dAtA[i:], m.ServiceRequester)
		i = encodeVarintInternl(dAtA, i, uint64(len(m.ServiceRequester)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MessageResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MessageResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MessageResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Value) > 0 {
		i -= len(m.Value)
		copy(dAtA[i:], m.Value)
		i = encodeVarintInternl(dAtA, i, uint64(len(m.Value)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *PushMessage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PushMessage) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PushMessage) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Code != 0 {
		i = encodeVarintInternl(dAtA, i, uint64(m.Code))
		i--
		dAtA[i] = 0x18
	}
	if m.Lang != 0 {
		i = encodeVarintInternl(dAtA, i, uint64(m.Lang))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Value) > 0 {
		i -= len(m.Value)
		copy(dAtA[i:], m.Value)
		i = encodeVarintInternl(dAtA, i, uint64(len(m.Value)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *PushMessageRes) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PushMessageRes) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PushMessageRes) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *NewCode) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NewCode) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NewCode) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Code != 0 {
		i = encodeVarintInternl(dAtA, i, uint64(m.Code))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Title) > 0 {
		i -= len(m.Title)
		copy(dAtA[i:], m.Title)
		i = encodeVarintInternl(dAtA, i, uint64(len(m.Title)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *NewCodeRes) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NewCodeRes) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NewCodeRes) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *SetTitleCode) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SetTitleCode) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SetTitleCode) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Code != 0 {
		i = encodeVarintInternl(dAtA, i, uint64(m.Code))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Title) > 0 {
		i -= len(m.Title)
		copy(dAtA[i:], m.Title)
		i = encodeVarintInternl(dAtA, i, uint64(len(m.Title)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SetTitleCodeRes) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SetTitleCodeRes) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SetTitleCodeRes) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *CodeReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CodeReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CodeReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Code != 0 {
		i = encodeVarintInternl(dAtA, i, uint64(m.Code))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Code) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Code) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Code) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Values) > 0 {
		for k := range m.Values {
			v := m.Values[k]
			baseI := i
			i -= len(v)
			copy(dAtA[i:], v)
			i = encodeVarintInternl(dAtA, i, uint64(len(v)))
			i--
			dAtA[i] = 0x12
			i = encodeVarintInternl(dAtA, i, uint64(k))
			i--
			dAtA[i] = 0x8
			i = encodeVarintInternl(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.Title) > 0 {
		i -= len(m.Title)
		copy(dAtA[i:], m.Title)
		i = encodeVarintInternl(dAtA, i, uint64(len(m.Title)))
		i--
		dAtA[i] = 0x12
	}
	if m.Code != 0 {
		i = encodeVarintInternl(dAtA, i, uint64(m.Code))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *AllReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AllReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AllReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *All) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *All) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *All) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Codes) > 0 {
		for k := range m.Codes {
			v := m.Codes[k]
			baseI := i
			if v != nil {
				{
					size, err := v.MarshalToSizedBuffer(dAtA[:i])
					if err != nil {
						return 0, err
					}
					i -= size
					i = encodeVarintInternl(dAtA, i, uint64(size))
				}
				i--
				dAtA[i] = 0x12
			}
			i = encodeVarintInternl(dAtA, i, uint64(k))
			i--
			dAtA[i] = 0x8
			i = encodeVarintInternl(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x1a
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintInternl(dAtA []byte, offset int, v uint64) int {
	offset -= sovInternl(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MessageRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ServiceRequester)
	if l > 0 {
		n += 1 + l + sovInternl(uint64(l))
	}
	if m.Lang != 0 {
		n += 1 + sovInternl(uint64(m.Lang))
	}
	if m.Code != 0 {
		n += 1 + sovInternl(uint64(m.Code))
	}
	return n
}

func (m *MessageResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Value)
	if l > 0 {
		n += 1 + l + sovInternl(uint64(l))
	}
	return n
}

func (m *PushMessage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Value)
	if l > 0 {
		n += 1 + l + sovInternl(uint64(l))
	}
	if m.Lang != 0 {
		n += 1 + sovInternl(uint64(m.Lang))
	}
	if m.Code != 0 {
		n += 1 + sovInternl(uint64(m.Code))
	}
	return n
}

func (m *PushMessageRes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *NewCode) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovInternl(uint64(l))
	}
	if m.Code != 0 {
		n += 1 + sovInternl(uint64(m.Code))
	}
	return n
}

func (m *NewCodeRes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *SetTitleCode) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovInternl(uint64(l))
	}
	if m.Code != 0 {
		n += 1 + sovInternl(uint64(m.Code))
	}
	return n
}

func (m *SetTitleCodeRes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *CodeReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovInternl(uint64(m.Code))
	}
	return n
}

func (m *Code) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovInternl(uint64(m.Code))
	}
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovInternl(uint64(l))
	}
	if len(m.Values) > 0 {
		for k, v := range m.Values {
			_ = k
			_ = v
			mapEntrySize := 1 + sovInternl(uint64(k)) + 1 + len(v) + sovInternl(uint64(len(v)))
			n += mapEntrySize + 1 + sovInternl(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *AllReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *All) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Codes) > 0 {
		for k, v := range m.Codes {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovInternl(uint64(l))
			}
			mapEntrySize := 1 + sovInternl(uint64(k)) + l
			n += mapEntrySize + 1 + sovInternl(uint64(mapEntrySize))
		}
	}
	return n
}

func sovInternl(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozInternl(x uint64) (n int) {
	return sovInternl(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *MessageRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&MessageRequest{`,
		`ServiceRequester:` + fmt.Sprintf("%v", this.ServiceRequester) + `,`,
		`Lang:` + fmt.Sprintf("%v", this.Lang) + `,`,
		`Code:` + fmt.Sprintf("%v", this.Code) + `,`,
		`}`,
	}, "")
	return s
}
func (this *MessageResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&MessageResponse{`,
		`Value:` + fmt.Sprintf("%v", this.Value) + `,`,
		`}`,
	}, "")
	return s
}
func (this *PushMessage) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&PushMessage{`,
		`Value:` + fmt.Sprintf("%v", this.Value) + `,`,
		`Lang:` + fmt.Sprintf("%v", this.Lang) + `,`,
		`Code:` + fmt.Sprintf("%v", this.Code) + `,`,
		`}`,
	}, "")
	return s
}
func (this *PushMessageRes) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&PushMessageRes{`,
		`}`,
	}, "")
	return s
}
func (this *NewCode) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&NewCode{`,
		`Title:` + fmt.Sprintf("%v", this.Title) + `,`,
		`Code:` + fmt.Sprintf("%v", this.Code) + `,`,
		`}`,
	}, "")
	return s
}
func (this *NewCodeRes) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&NewCodeRes{`,
		`}`,
	}, "")
	return s
}
func (this *SetTitleCode) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SetTitleCode{`,
		`Title:` + fmt.Sprintf("%v", this.Title) + `,`,
		`Code:` + fmt.Sprintf("%v", this.Code) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SetTitleCodeRes) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SetTitleCodeRes{`,
		`}`,
	}, "")
	return s
}
func (this *CodeReq) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CodeReq{`,
		`Code:` + fmt.Sprintf("%v", this.Code) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Code) String() string {
	if this == nil {
		return "nil"
	}
	keysForValues := make([]uint32, 0, len(this.Values))
	for k, _ := range this.Values {
		keysForValues = append(keysForValues, k)
	}
	github_com_gogo_protobuf_sortkeys.Uint32s(keysForValues)
	mapStringForValues := "map[uint32]string{"
	for _, k := range keysForValues {
		mapStringForValues += fmt.Sprintf("%v: %v,", k, this.Values[k])
	}
	mapStringForValues += "}"
	s := strings.Join([]string{`&Code{`,
		`Code:` + fmt.Sprintf("%v", this.Code) + `,`,
		`Title:` + fmt.Sprintf("%v", this.Title) + `,`,
		`Values:` + mapStringForValues + `,`,
		`}`,
	}, "")
	return s
}
func (this *AllReq) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AllReq{`,
		`}`,
	}, "")
	return s
}
func (this *All) String() string {
	if this == nil {
		return "nil"
	}
	keysForCodes := make([]uint32, 0, len(this.Codes))
	for k, _ := range this.Codes {
		keysForCodes = append(keysForCodes, k)
	}
	github_com_gogo_protobuf_sortkeys.Uint32s(keysForCodes)
	mapStringForCodes := "map[uint32]*Code{"
	for _, k := range keysForCodes {
		mapStringForCodes += fmt.Sprintf("%v: %v,", k, this.Codes[k])
	}
	mapStringForCodes += "}"
	s := strings.Join([]string{`&All{`,
		`Codes:` + mapStringForCodes + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringInternl(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *MessageRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInternl
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MessageRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MessageRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServiceRequester", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthInternl
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthInternl
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ServiceRequester = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Lang", wireType)
			}
			m.Lang = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Lang |= Languages(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipInternl(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthInternl
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthInternl
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MessageResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInternl
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MessageResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MessageResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthInternl
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthInternl
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Value = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipInternl(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthInternl
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthInternl
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PushMessage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInternl
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PushMessage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PushMessage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthInternl
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthInternl
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Value = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Lang", wireType)
			}
			m.Lang = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Lang |= Languages(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipInternl(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthInternl
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthInternl
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PushMessageRes) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInternl
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PushMessageRes: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PushMessageRes: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipInternl(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthInternl
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthInternl
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NewCode) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInternl
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NewCode: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NewCode: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthInternl
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthInternl
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipInternl(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthInternl
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthInternl
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NewCodeRes) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInternl
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NewCodeRes: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NewCodeRes: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipInternl(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthInternl
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthInternl
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SetTitleCode) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInternl
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SetTitleCode: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SetTitleCode: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthInternl
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthInternl
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipInternl(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthInternl
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthInternl
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SetTitleCodeRes) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInternl
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SetTitleCodeRes: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SetTitleCodeRes: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipInternl(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthInternl
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthInternl
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CodeReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInternl
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CodeReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CodeReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipInternl(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthInternl
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthInternl
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Code) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInternl
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Code: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Code: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthInternl
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthInternl
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Values", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthInternl
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthInternl
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Values == nil {
				m.Values = make(map[uint32]string)
			}
			var mapkey uint32
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowInternl
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowInternl
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= uint32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowInternl
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthInternl
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue < 0 {
						return ErrInvalidLengthInternl
					}
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipInternl(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthInternl
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Values[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipInternl(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthInternl
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthInternl
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AllReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInternl
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AllReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AllReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipInternl(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthInternl
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthInternl
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *All) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInternl
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: All: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: All: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Codes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthInternl
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthInternl
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Codes == nil {
				m.Codes = make(map[uint32]*Code)
			}
			var mapkey uint32
			var mapvalue *Code
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowInternl
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowInternl
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= uint32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowInternl
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthInternl
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthInternl
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &Code{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipInternl(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthInternl
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Codes[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipInternl(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthInternl
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthInternl
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipInternl(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowInternl
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowInternl
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowInternl
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthInternl
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupInternl
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthInternl
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthInternl        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowInternl          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupInternl = fmt.Errorf("proto: unexpected end of group")
)
